
import java.awt.BorderLayout;
import java.awt.Dimension;
import java.awt.FlowLayout;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.image.BufferedImage;
import java.io.File;
import java.io.IOException;

import javax.imageio.ImageIO;
import javax.swing.BorderFactory;
import javax.swing.BoxLayout;
import javax.swing.ImageIcon;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JPanel;
import javax.swing.JTextField;

/**
 * @author Andriy Pavlovych The class is meant to illustrate a couple of
 *         image-processing algorithms: Gaussian blurring and simple sharpening
 *         Java Swing is used to implement the GUI of the application
 *         Limitations: image sizes are limited by computer screen resolution
 *         (no scaling is implemented)
 */
@SuppressWarnings("serial")
public class ImageFilter extends JFrame implements ActionListener {
	private String fileName;
	private BufferedImage image;
	private JButton blurButton, sharpenButton;
	private JLabel sourceImageLabel, resultImageLabel;
	private JTextField sigmaField;
	private JPanel sourcePanel, middlePanel, resultPanel, blurPanel, sharpenPanel;
	private double[] kernel1D = { 0.006, 0.061, 0.242, 0.383, 0.242, 0.061, 0.006 }; // sigma = 1;

//	private double [] kernel1D3 = {0.063327,	0.093095,	0.122589,	0.144599,	0.152781,	0.144599,	0.122589,	0.093095,	0.063327}; //sigma = 3
//
//	private double [] kernel1D5 = {0.034619,	0.044859,	0.055857,	0.066833,	0.076841,	0.084894,	0.090126,	0.09194,	0.090126,	
//	0.084894, 0.076841,	0.066833,	0.055857,	0.044859,	0.034619}; //sigma = 5

	/**
	 * @param fileName name of the image file to process loads the image with the
	 *                 filename provided
	 */
	public ImageFilter(String fileName) {
		this.fileName = fileName;
		try {
			image = ImageIO.read(new File(fileName));
		} catch (IOException e) {
		}
		initUI();
	}

	private void initUI() {
		sourceImageLabel = new JLabel(new ImageIcon(fileName));

		resultImageLabel = new JLabel(new ImageIcon(image));

		sigmaField = new JTextField(4);
		sigmaField.setText("1.0");
		blurButton = new JButton("Blur");
		blurButton.setPreferredSize(new Dimension(84, 24));
		blurButton.addActionListener(this);
		sharpenButton = new JButton("Sharpen");
		sharpenButton.setPreferredSize(new Dimension(84, 24));
		sharpenButton.addActionListener(this);

		getContentPane().setLayout(new BorderLayout());
		sourcePanel = new JPanel();
		middlePanel = new JPanel();
		resultPanel = new JPanel();
		sourcePanel.setLayout(new BoxLayout(sourcePanel, BoxLayout.Y_AXIS));
		sourcePanel.add(new JLabel("Source"));
		sourcePanel.add(sourceImageLabel);
		add(sourcePanel, BorderLayout.WEST);

		middlePanel.setLayout(new BorderLayout(10, 10));

		blurPanel = new JPanel();
		blurPanel.setLayout(new FlowLayout(FlowLayout.TRAILING, 5, 5));
		blurPanel.setBorder(BorderFactory.createEmptyBorder(0, 10, 10, 10));
		blurPanel.add(new JLabel("Sigma "));
		blurPanel.add(sigmaField);
		blurPanel.add(blurButton);

		sharpenPanel = new JPanel();
		sharpenPanel.setLayout(new FlowLayout(FlowLayout.TRAILING, 5, 5));
		sharpenPanel.setBorder(BorderFactory.createEmptyBorder(0, 10, 10, 10));
		sharpenPanel.add(sharpenButton);
		middlePanel.add(new JLabel(" "), BorderLayout.NORTH);
		middlePanel.add(blurPanel, BorderLayout.CENTER);
		middlePanel.add(sharpenPanel, BorderLayout.SOUTH);
		add(middlePanel, BorderLayout.CENTER);

		resultPanel.setLayout(new BoxLayout(resultPanel, BoxLayout.Y_AXIS));
		resultPanel.add(new JLabel("Result"));
		resultPanel.add(resultImageLabel);
		add(resultPanel, BorderLayout.EAST);

		pack();
		setTitle("ImageFilter");
		setLocationRelativeTo(null); // place in the centre of the screen
		setDefaultCloseOperation(EXIT_ON_CLOSE);
	}

	public static void main(String[] args) {
		String fileName = args[0]; // take the first argument
		for (int i = 0; i <= args.length - 1; i++) {
			if (args[i] != args[0]) {

				System.out.print("The number of argument is not 1");
			}
		}
		ImageFilter ex = new ImageFilter(fileName);
		ex.setVisible(true);
	}

	/**
	 * Method implements Gaussian blurring
	 * 
	 * @param imageData array of image pixels
	 * @param width     image width
	 * @param sigma     parameter of the Gaussian distribution
	 */
	private void blur(int[] imageData, int width, double sigma) {
		// TODO your task is to replace this stub code with the proper implementation of
		// the method
		// create a temporary array to store the result
		double[] kernal1 = { 0.06136, 0.24477, 0.38774, 0.24477, 0.06136 };
		double sig = 0.0;
		double[] result;
		result = new double[sig];

		// apply convolution in one dimension

		if (sigma == 1.0) {
			for (int i = 0; i <= imageData.length-1; i++) {
				result[i] = imageData[i - 2] * kernal1[i - 1] + imageData[i] * kernal1[1] + imageData[0] * kernal1[2]
						+ imageData[i + 1] * kernal1[3] + imageData[i + 2] * kernal1[4];
			}
		}

		// repeat for the other dimension

		// store the result back to the original array
		System.arraycopy(result, 0, imageData, 0, imageData.length);
	}

	/**
	 * Method implements simple sharpening
	 * 
	 * @param imageData imageData array of image pixels
	 * @param width     image width
	 */
	private void sharpen(int[] imageData, int width) {
		// TODO your task is to replace this stub code with the proper implementation of
		// the method
		// Currently, it demonstrates how to extract RGB pixel values from the image and
		// how to write them them back
		for (int i = 0; i < imageData.length; i++) {
			int red, green, blue;
			red = (imageData[i] & 0x00FF0000) >> 16;
			green = (imageData[i] & 0x0000FF00) >> 8;
			blue = (imageData[i] & 0x000000FF);
			// do some operations

			// then store the result back
			imageData[i] = red << 16 | green << 8 | blue;
		}
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		if (e.getSource() == blurButton) {
			int[] rgbData = image.getRGB(0, 0, image.getWidth(), image.getHeight(), null, 0, image.getWidth());
			blur(rgbData, image.getWidth(), Double.parseDouble(sigmaField.getText()));
			image.setRGB(0, 0, image.getWidth(), image.getHeight(), rgbData, 0, image.getWidth());
			resultImageLabel.setIcon(new ImageIcon(image));

		} else if (e.getSource() == sharpenButton) {
			int[] rgbData = image.getRGB(0, 0, image.getWidth(), image.getHeight(), null, 0, image.getWidth());
			sharpen(rgbData, image.getWidth());
			image.setRGB(0, 0, image.getWidth(), image.getHeight(), rgbData, 0, image.getWidth());
			resultImageLabel.setIcon(new ImageIcon(image));
		}
	}

}
